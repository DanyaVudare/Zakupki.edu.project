package zakupki.utils;

import java.nio.file.Path;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Optional;
import java.util.UUID;
import org.springframework.stereotype.Component;

@Component
public class CommonUtils {

    public LocalDate convertCalendarToLocalDate(Calendar calendar) {
        return LocalDateTime
            .ofInstant(calendar.toInstant(), calendar.getTimeZone().toZoneId())
            .toLocalDate();
    }

    public static String validateAndGetGuid(String guid) {
        if (guid != null && !guid.equals("00000000-0000-0000-0000-000000000000")) {
            return guid;
        } else {
            return "autogenerated-" + generateGuid();
        }
    }

    public static String generateGuid() {
        return UUID.randomUUID().toString();
    }

    public static String extractRegionFromFilePath(String filePath) {
        //Формат типФайла_Регион(может содержать _)_Дата.xml
        var path = Path.of(filePath);
        var words = path.getFileName().toString().split("_");
        StringBuilder region = new StringBuilder(words[1]);
        for (int i = 2; i < words.length; ++i) {
            if (words[i].equals("") || !Character.isDigit(words[i].charAt(0))) {
                region.append("_").append(words[i]);
            } else {
                break;
            }
        }
        return region.toString();
    }

    public static Optional<String> validateInn(String inn) {
        if (inn == null || inn.equals("0000000000") || inn.equals("Неизвестно") || inn.equals("000000000000")) {
            return Optional.empty();
        }
        return Optional.of(inn);
    }

    public static boolean isDateInInterval(LocalDate startDate, LocalDate endDate, LocalDate date) {
        return date.isAfter(startDate) && date.isBefore(endDate) || date.equals(startDate) || date.equals(endDate);
    }
}
